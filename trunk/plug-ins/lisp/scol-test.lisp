; SUPERCOLLIDER OFFLINE PLUG-IN FOR MULTIPLE DISCRETE LOUDSPEAKERS AND INTENSITY PANNING(setq realtime NIL); returns NIL if an error occurs(defun my-bundle-send (timetag bundle)	(not (null (osc-bundle-send 'scosc timetag bundle))))(load (path-concat (gethash "BASEDIRECTORY" prefs) "sc-test.lisp"))(defun parse-sc-output (textline)	(if (and (> (length textline) 14) (eql "nextOSCPacket " (substring textline 0 14)))		(let ((timepos (format-parse "{0,number}" (substring textline 14 (length textline)))))			(if (> (length timepos) 0)				(progression-set (/ (car timepos) duration))	; percent			; else				(println textline)			)		)	; else		(println textline)	))(defun make-sense NIL	(progn		(iter 'stream-idx 0 (length stream-files) 'T			'(let ((bufidx (elt stream-bufidx stream-idx))				   (temp-file-name (elt stream-files stream-idx)))						(osc-bundle-send 'scosc bundle-time (list					; /b_read bufIdx path fileOff numFrames bufOff leaveOpen					(list "/b_read" bufidx temp-file-name read-pos sensebuf-size-h (if even-odd 0 sensebuf-size-h) 1)				))			)		)		(setq read-pos (+ read-pos sensebuf-size-h))		(setq even-odd (not even-odd))	))(defun senseiter (incr-time stop-time cmd)	(if (< bundle-time stop-time)		(progn			(eval cmd)			(setq bundle-time (+ bundle-time incr-time))			(senseiter incr-time stop-time cmd)		)	; else		NIL	)); iterate over a list of regex matcher word boundary groups; and extract all inbetween words(defun regexiter (groups input)	(if (> (length groups) 1)		(cons (substring input (cdr (first groups)) (car (second groups)))			(if (> (length groups) 2)				(regexiter (cdr groups) input)			)		)	))(defun render NIL (progn	; ---------------------------- START TIME ----------------------------	(setq even-odd T)	(setq read-pos 0)	(setq bundle-time 0.0)	(make-sense)	; preload first buffer half	(make-sense)	; preload second buffer half	(play (gethash "START" timeline))	; ---------------------------- RENDER TIME ----------------------------	(let ((half-bufdur (/ sensebuf-size-h sense-rate)))	; duration of half buffer in seconds		(setq bundle-time (* half-bufdur 1.5))			; slightly after entering the second buffer half		(senseiter half-bufdur duration '(make-sense))	)	; ---------------------------- STOP TIME ----------------------------	(setq bundle-time duration)	; dummy termination	(osc-bundle-send 'scosc bundle-time (list		(list "/sync" 0)	))		; ---------------------------- SUPERCOLLIDER APP ----------------------------	(iter 'stream-idx 0 (length stream-files) 'T		'(let ((obj (elt stream-fileids stream-idx)))			(file-close obj)		)	)	(file-close 'scosc)	; close osc file	; calculate number of outputs (ignores solo + mute!)	(setq numoutputs 0)	(cycle 'inobj collin 'T		'(if (gethash "AUX" inobj) (setq numoutputs (max numoutputs (gethash "AUXBUS" inobj))))	)	(cycle 'outobj collout 'T		'(if (eql "matrix" (gethash "OUTPROC" outobj)) (setq numoutputs (max numoutputs (gethash "AUDIOBUS" outobj))))	)	(setq app-path (gethash "SUPERCOLLIDERAPP" prefs))	(let ((exec-args (append (append				(list app-path)				(regexiter (regex-match "(\\A|[\\s]+|\\Z)+" app-options) app-options))				(list  "-i" 1 "-o" numoutputs "-N" osc-cmd-file "_" output-file audio-rate output-format output-res))))		(println (concatenate 'STRING "Execute: " (concat-args exec-args)))		(setq return-code (execute parse-sc-output exec-args NIL (car (path-split app-path))))		(println (concatenate 'STRING "Exited with return code " return-code))	)	(eql return-code 1)		; success if return code is 1))(defun cleanup NIL (progn	(if (oboundp 'scsync) (progn		(osc-bundle-send 'scsync 0.0 (list (list "/notify" 0)))		(datagram-channel-close 'scsync)	))	(if (oboundp 'scsense) (byte-buffer-free 'scsense) NIL);	(if (oboundp 'scosc) (progn;		(iter 'stream-idx 0 (length stream-files) 'T;			'(let ((obj (elt stream-fileids stream-idx)));				(file-close obj);			);		);		(file-close 'scosc);	))				T	; success))