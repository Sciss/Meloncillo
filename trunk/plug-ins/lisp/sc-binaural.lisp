; SUPERCOLLIDER BINAURAL PLUG-IN;; last modified: 23-May-05;; java object ids used: scosc	= datagram channel;						scsense = bytebuffer for sense data;						scsync	= datagram listening channel(println "SC Binaural v0.75 (13-Jul-08)")(setq zero-buf-start 0)(setq impulse-length 1024); iterate over all groups, where grpidx; should be initially set to zero and increases up to (numgrp-1); or until the loop is aborted (setting 'success' to NIL)(defun grpiter (cmd)	(if (and success (< grpidx numgrp))		(progn			(eval cmd)			(setq grpidx (1+ grpidx))			(grpiter cmd)		)	)); iterate over all transmitters, where trnsidx; should be initially set to zero and increases up to (numtrns-1)(defun trnsiter (cmd)	(if (< trnsidx numtrns)		(progn			(eval cmd)			(setq trnsidx (1+ trnsidx))			(trnsiter cmd)		)	)); iterate over all receivers, where rcvidx; should be initially set to zero and increases up to (numrcv-1)(defun rcviter (cmd)	(if (< rcvidx numrcv)		(progn			(eval cmd)			(setq rcvidx (1+ rcvidx))			(rcviter cmd)		)	)); iterate over all outputs, where outidx; should be initially set to zero and increases up to (numoutputs-1); or until the loop is aborted (setting 'success' to NIL)(defun outiter (cmd)	(if (and success (< outidx numoutputs))		(progn			(eval cmd)			(setq outidx (1+ outidx))			(outiter cmd)		)	)); iterate over all inputs, where inidx; should be initially set to zero and increases up to (numinputs-1); or until the loop is aborted (setting 'success' to NIL)(defun initer (cmd)	(if (and success (< inidx numinputs))		(progn			(eval cmd)			(setq inidx (1+ inidx))			(initer cmd)		)	)); iterate over a list of regex matcher word boundary groups; and extract all inbetween words(defun regexiter (groups input)	(if (> (length groups) 1)		(cons (substring input (cdr (first groups)) (car (second groups)))			(if (> (length groups) 2)				(regexiter (cdr groups) input)			)		)	))(defun align (val block) (* (floor (/ (+ val (1- block)) block)) block))(defun concat-args (args)	(if (null args) "" (concatenate 'STRING (car args) " " (concat-args (cdr args)))))(defun alloc-node NIL	(let ((result node-counter))		(setq node-counter (1+ node-counter))		result	))(defun alloc-buf NIL	(let ((result buf-counter))		(setq buf-counter (1+ buf-counter))		result	))(defun alloc-abus NIL	(let ((result abus-counter))		(setq abus-counter (1+ abus-counter))		result	)); iterate from startidx incl. to stopidx excl. using variable itervar and executing cmd; if success is NIL, iteration is aborted(defun iter (itervar startidx stopidx cmd)	(if (and success (< startidx stopidx))		(progn			(set itervar startidx)			(eval cmd)			(iter itervar (1+ startidx) stopidx cmd)		)	))(defun prepare NIL (progn	(setq collgrp (gethash "GROUPS" cillo))	(setq numgrp (length collgrp))	(setq collrcv (gethash "RECEIVERS" cillo))	(setq numrcv (length collrcv))	(setq colltrns (gethash "TRANSMITTERS" cillo))	(setq numtrns (length colltrns))	(println (concatenate 'STRING "numgrp = " numgrp))		(setq timeline (gethash "TIMELINE" cillo))	(setq duration (- (gethash "STOP" timeline) (gethash "START" timeline)))	; in seconds	(setq sensebuf-size (gethash "SENSEBUFSIZE" prefs))	; limited one	(setq sensebuf-size-h (/ sensebuf-size 2))	(setq sense-rate (gethash "SENSERATE" prefs))	; limited one	(setq audio-rate (gethash "AUDIORATE" prefs))	(setq diskbuf-size (gethash "DISKBUFSIZE" prefs))	(setq volume (pow 10 (/ master-gain 20)))	; nodes	(setq node-counter 1977)	(setq master-group (alloc-node))	(setq input-group (alloc-node))	(setq mix-group (alloc-node))	(setq phasor-node (alloc-node))	; buffers	(setq buf-counter 0)	; control busses	(setq phasor-bus 0)		; audio busses	(setq input-bus-off (+ (gethash "INPUTCHANNELS" prefs) (gethash "OUTPUTCHANNELS" prefs)))	(setq abus-counter input-bus-off)	(setq mixinput-bus-off input-bus-off)	(setq mixoutput-bus-off 0)	(if realtime		(let ((sc-socket (gethash "SUPERCOLLIDEROSC" prefs)))			(datagram-channel-open 'scosc (car sc-socket) (cdr sc-socket))			(datagram-channel-open 'scsync (car sc-socket) (cdr sc-socket))			(osc-bundle-send 'scosc 0.0 (list (list "/dumpOSC" (* dump-osc 3))))			(target-request "SYNC" 0 'scsync)			(setq success (not (null (osc-bundle-send-and-wait 'scsync 0.0				(list (list "/notify" 1)) "/done" 1000))))		)	; else		(progn			(setq stream-files NIL)			(setq stream-bufidx NIL)			(setq stream-fileids NIL)			(setq osc-cmd-file (temp-file-make))			(file-open 'scosc osc-cmd-file "w")			(setq success T)		)	)	(if (not success) (println "FAILED! supercollider osc notification"))	; create objects	(if success		(let ((sense-not-aligned (+ 13 sensebuf-size-h))			  (traj-not-aligned (+ 13 sensebuf-size)))			(setq sense-msgbuf-off (align sense-not-aligned 4))			(byte-buffer-alloc 'sensemsg (+ (+ sense-msgbuf-off 12) (* sensebuf-size-h 4)))			(byte-buffer-write 'sensemsg "/b_setn\\0x00,iii")			(byte-buffer-write 'sensemsg "f" sensebuf-size-h)			(byte-buffer-write 'sensemsg '(0) (+ 9 (- sense-msgbuf-off sense-not-aligned)))	; bufNum, bufOff (initially 0)			(byte-buffer-write 'sensemsg sensebuf-size-h)	; constant # of samples			(setq traj-msgbuf-off (align traj-not-aligned 4))			(byte-buffer-alloc 'trajmsg (+ (+ traj-msgbuf-off 12) (* sensebuf-size 4)))			(byte-buffer-write 'trajmsg "/b_setn\\0x00,iii")			(byte-buffer-write 'trajmsg "f" sensebuf-size)			(byte-buffer-write 'trajmsg '(0) (+ 9 (- traj-msgbuf-off traj-not-aligned)))	; bufNum, bufOff (initially 0)			(byte-buffer-write 'trajmsg sensebuf-size)		; constant # of samples		)	)		; create groups	(if success		(if (not (setq success			(let ((synthdefs (path-concat (path-concat (car (path-split (gethash "BASEDIRECTORY" prefs))) "sc") "*.scsyndef")))				(my-bundle-send 0.0 (list					(list						"/g_new" master-group 1 0								input-group   0 master-group								mix-group     1 master-group					)					(list "/n_run" master-group 0)					(list "/d_load" synthdefs)					(list "/sync" 6)				))			)		)) (println "FAILED! group creation, definition load"))	)	; allocate and load impulse responses	(if success		(if (not (setq success			(let ((synthdefs (path-concat (path-concat (car (path-split (gethash "BASEDIRECTORY" prefs))) "sc") "cillo-*.scsyndef")))							(setq hrtf-bufoff-l buf-counter)				(iter 'idx 0 168					'(let ((bufidx (alloc-buf)))						(osc-bundle-send 'scosc 0.0 (list							(list "/b_alloc" bufidx impulse-length)							(list "/b_read" bufidx (path-concat hrtf-path (concatenate 'STRING "hrtf" idx "l.aif")) 0 impulse-length)						))					)				)				(setq hrtf-bufoff-r buf-counter)				(if (my-bundle-send 0.0 (list (list "/sync" 8))) (progn					(iter 'idx 0 168						'(let ((bufidx (alloc-buf)))							(osc-bundle-send 'scosc 0.0 (list								(list "/b_alloc" bufidx impulse-length)								(list "/b_read" bufidx (path-concat hrtf-path (concatenate 'STRING "hrtf" idx "r.aif")) 0 impulse-length)							))						)					)					(setq zero-buf-start buf-counter)					(my-bundle-send 0.0 (list (list "/sync" 9)))	; -> success				))			)		)) (println "FAILED! alloc + load impulse responses"))	)	; preprocess all objects	(if success (progn		(setq bundle NIL)		(setq grpidx 0)		(grpiter			'(let ((obj (elt collgrp grpidx))				   (bufidx (alloc-buf))				   (abusidx (alloc-abus)))							(setf-gethash "BUFIDX" obj bufidx)				(setf-gethash "NODEIDX" obj (alloc-node))				(setf-gethash "BUSIDX" obj abusidx)				(setq bundle (append bundle (list					(list "/b_alloc" bufidx diskbuf-size)				)))			)		)		(if (not (setq success (my-bundle-send 0.0			(append bundle (list (list "/sync" 7)))))) (println "FAILED! audiofile buffer alloc"))	))	(if success (progn		(setq bundle NIL)		(setq grpidx 0)		(grpiter			'(let ((grp (elt collgrp grpidx)))				(let ((collrcvg (gethash "RECEIVERS" grp))					  (colltrnsg (gethash "TRANSMITTERS" grp)))					(if (zerop (logand (gethash "FLAGS" grp) 10))	; is playing?											(if (and (eql (length collrcvg) 1) (eql (length colltrnsg) 2)								 (not (eql (gethash "ROLE" (first colltrnsg)) (gethash "ROLE" (second colltrnsg)))))							(let ((azitrns (if (eql (gethash "ROLE" (first colltrnsg)) "azi") (first colltrnsg) (second colltrnsg)))								  (elevtrns (if (eql (gethash "ROLE" (first colltrnsg)) "elev") (first colltrnsg) (second colltrnsg)))								  (rcv (first collrcvg)))								  								(let ((azitrnsidx (- (length colltrns) (length (member azitrns colltrns))))									  (elevtrnsidx (- (length colltrns) (length (member elevtrns colltrns))))									  (azitrajbufidx (alloc-buf))									  (elevtrajbufidx (alloc-buf)))																	(if realtime (progn										(source-request "TRAJ" azitrnsidx 'trajmsg (list											(list "INT" azitrajbufidx traj-msgbuf-off)				; update buffer index											(list "VAR" "BUFOFF" (+ traj-msgbuf-off 4))				; update buffer offset											(list "STREAM" (+ traj-msgbuf-off 12))					; update buffer content											(list "SEND" 'scosc)										))										(source-request "TRAJ" elevtrnsidx 'trajmsg (list											(list "INT" elevtrajbufidx traj-msgbuf-off)											(list "VAR" "BUFOFF" (+ traj-msgbuf-off 4))											(list "STREAM" (+ traj-msgbuf-off 12))											(list "SEND" 'scosc)										))									) ; else										(let ((azi-file-name (temp-file-make))											  (elev-file-name (temp-file-make))											  (azi-file-id (concatenate 'STRING "azi" grpidx))											  (elev-file-id (concatenate 'STRING "elev" grpidx)))											  											(audio-file-open azi-file-id azi-file-name "ircam" "float32" sense-rate 2)											(source-request "TRAJ" azitrnsidx azi-file-id)											(audio-file-open elev-file-id elev-file-name "ircam" "float32" sense-rate 2)											(source-request "TRAJ" elevtrnsidx elev-file-id)											(setq stream-files (append stream-files (list azi-file-name elev-file-name)))											(setq stream-bufidx (append stream-bufidx (list azitrajbufidx elevtrajbufidx)))											(setq stream-fileids (append stream-bufidx (list azi-file-id elev-file-id)))										)									)																		(if (not (eql (gethash "FLAGS" azitrns) 0)) (println (concatenate 'STRING "! solo-mute status of '"										(gethash "NAME" azitrns) "' ignored!")))									(if (not (eql (gethash "FLAGS" elevtrns) 0)) (println (concatenate 'STRING "! solo-mute status of '"										(gethash "NAME" elevtrns) "' ignored!")))									(setq bundle (append bundle (list										(list "/b_alloc" azitrajbufidx sensebuf-size 2)										(list "/b_alloc" elevtrajbufidx sensebuf-size 2)										(list "/s_new" "hrtf-synth" (alloc-node) 1 mix-group											"i_aInBus"		(gethash "BUSIDX" grp)											"i_aOutBusL"	(1- (gethash "AUDIOBUSL" grp))											"i_aOutBusR"	(1- (gethash "AUDIOBUSR" grp))											"i_kAziBuf"		azitrajbufidx											"i_kElevBuf"	elevtrajbufidx											"i_hrtfBufOffL"	hrtf-bufoff-l											"i_hrtfBufOffR"	hrtf-bufoff-r											"i_kPhasorBus"	phasor-bus											"i_locX"		(gethash "X" rcv)											"i_locY"		(gethash "Y" rcv)										)									)))								)							)						; else							(progn								(println "each group must have exactly one azi transmitter,\\none elev transmitter, and one receiver")								(setq grpidx numgrps)	; break loop								(setq success NIL)							)						)					)				)			)		)		(if success (if (not (setq success (my-bundle-send 0.0 (append bundle (list (list "/sync" 10))))))			(println "TIMEOUT! creating synths")))	))		success))(defun seekpos (time-off) (progn	(setq frame-off (floor (* audio-rate time-off)))	; WARNING : time-off is not accessible within function calls!!	(setq bundle (list		(list "/g_freeAll" input-group)		(list "/s_new" "cillo-phasor" phasor-node 1 input-group			"i_rate"		sense-rate			"i_bufSize"		sensebuf-size			"i_kPhasorBus"	phasor-bus		)	))	(setq grpidx 0)	(grpiter		'(let ((obj (elt collgrp grpidx)))			(let ((bufidx (gethash "BUFIDX" obj)))				(setq bundle (append bundle (list					(list "/b_close" bufidx)			; ATTENTION : buffers have to be closed before re-reading!!					(list "/b_read" bufidx (gethash "AUDIOFILE" obj) frame-off diskbuf-size 0 1)					(list "/s_new" "cillo-input" (gethash "NODEIDX" obj) 1 input-group						"i_aInBuf"		bufidx						"i_aOutBus"		(gethash "BUSIDX" obj)						"i_gain"		volume					)				)))			)		)	)	(if (not (setq success (my-bundle-send 0.0 (append bundle (list (list "/sync" 4))))))		(println "TIMEOUT! adjusting position"))	success))							(defun playstop (toggle)	(if (not (setq success (my-bundle-send 0.0 (list					(list "/n_run" master-group toggle)					(list "/sync" 5)))))		(println "FAILED! playstop"))	success)(defun play (time-off)	(if (seekpos time-off) (playstop 1) NIL))(defun stop (time-off)	(if (playstop 0) (progn		; clear buffers to prevent noise burst in loop mode		(setq bundle NIL)		(iter 'bufidx zero-buf-start buf-counter			'(setq bundle (append bundle (list				(list "/b_zero" bufidx)			)))		)		(osc-bundle-send 'scosc 0.0 bundle)		T	)))(defun position (time-off)	(if (stop time-off) (play time-off) NIL))(defun create-gui NIL (progn	(gadget-make NIL "LABEL" '(1 3 2 1) "HRIR Folder")	(gadget-make hrtf-path "PATH" '(3 3 3 1) "" '("Folder which contains 'hrtfN(l|r).aif' files" "FOLDER"))	(gadget-make NIL "LABEL" '(1 4 2 1) "Master Gain")	(gadget-make master-gain "NUMBER" '(3 4) 0.0 '("dB"))	; -------------------------------- realtime --------------------------------	(if realtime (progn		(gadget-make NIL "LABEL" '(4 4) "  Dump OSC")		(gadget-make dump-osc "CHECKBOX" '(5 4) 0)	; -------------------------------- offline --------------------------------	) (progn ; else		(gadget-make NIL "LABEL" '(1 13 2 1) "Output Sound File")		(gadget-make output-file "PATH" '(3 13 3 1) "" '(NIL "OUTPUT"))		(gadget-make NIL "LABEL" '(1 14 2 1) "Output Format")		(gadget-make output-format "CHOICE" '(3 14) "aiff"			'(("aiff" . "AIFF") ("next" . "NeXT/Sun AU") ("ircam" . "IRCAM")))		(gadget-make output-res "CHOICE" '(4 14 2 1) "int24"			'(("int16" . "16-bit int") ("int24" . "24-bit int") ("int32" . "32-bit int")			  ("float" . "32-bit float") ("double" . "64-bit float")));			(gadget-make NIL "LABEL" '(4 15) "Audio Rate");			(gadget-make output-rate "NUMBER" '(5 15) 44100 '("Hz"))		(gadget-make NIL "LABEL" '(1 15 2 1) "SuperCollider Options")		(gadget-make app-options "TEXT" '(3 15) "")	))	(session-property-add "GROUPS" "Audio Bus L" "AUDIOBUSL" "INTEGER" 1 '(1 1024 1))	(session-property-add "GROUPS" "Audio Bus R" "AUDIOBUSR" "INTEGER" 2 '(1 1024 1))	(session-property-add "GROUPS" "Audio File" "AUDIOFILE" "FILE" "")	(session-property-add "TRANSMITTERS" "Role" "ROLE" "STRING" "azi" '(("azi" . "Azimuth") ("elev" . "Elevation")))	T	; success))