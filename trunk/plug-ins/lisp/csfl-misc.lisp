; CSOUND EXPERIMENTAL PATCHES;	MODE = "reverb" 	for REVERBERATION;	MODE = "smooth" 	for SMOOTHING;	MODE = "mirroir" 	for X / Y TRANSITIONS;; last modified: 13-jul-08; changelog:;   24-dec-04   uses new 'concatenate' statements;               so it works with jatha 2.3;   13-jul-08   fixed CsoundSynthesizer xml element;				center now 0, 0;; tab-size: 4(setq center-x 0.0)(setq center-y 0.0); iterate over all transmitters, where trnsidx; should be initially set to zero and increases up to (numtrns-1)(defun trnsiter (cmd)	(if (< trnsidx numtrns)		(progn			(eval cmd)			(setq trnsidx (1+ trnsidx))			(trnsiter cmd)		)	; else		NIL	)); iterate over all transmitters, where trnsidx; should be initially set to zero and increases up to (numtrns-1); in !steps of two!(defun trnsiter2 (cmd)	(if (< trnsidx numtrns)		(progn			(eval cmd)			(setq trnsidx (+ 2 trnsidx))			(trnsiter2 cmd)		)	; else		NIL	))(defun parse-cs-output (textline)	(if (and (eql 10 (length textline)) (eql "CILLO " (substring textline 0 6)))		(progression-set (car (format-parse "{0,number}" (substring textline 6 10))))	; percent	; else		(println textline)	))(defun concat-args (args)	(if (null args) "" (concatenate 'STRING (car args) " " (concat-args (cdr args)))))(defun prepare NIL	(progn		(setq colltrns (gethash "TRANSMITTERS" cillo))		(setq numtrns (length colltrns));		(setq prefs (gethash "PREFERENCES" cillo))		(setq timeline (gethash "TIMELINE" cillo))		(setq duration (- (gethash "STOP" timeline) (gethash "START" timeline)))	; in seconds		(setq sense-rate (gethash "SENSERATE" prefs))		(setq app-path (gethash "CSOUNDAPP" prefs))		; busses		(setq trajxbus-off 1)		(setq trajybus-off (+ trajxbus-off numtrns))		(setq numaudiobusses (+ trajybus-off numtrns))		(setq traj-id-off 0)		(setq trnsidx 0)		(trnsiter '(progn			(setq trns (elt colltrns trnsidx))			(let ((temp-input-file (temp-file-make))				  (temp-output-file (temp-file-make)))				(setq bufidx (+ traj-id-off trnsidx))				(audio-file-open bufidx temp-input-file "raw" "float32" sense-rate 2)				(source-request "TRAJ" trnsidx bufidx)				(target-request "TRAJ" trnsidx temp-output-file)				(setf-gethash "INPUT-FILE" trns temp-input-file)				(setf-gethash "OUTPUT-FILE" trns temp-output-file)			)		))					T	; success	))(defun render NIL	(progn		; because csound sucks and cannot write		; more than one stereo output file		; we iterate over the transmitters and		; call csound separately for each transmitter		(setq include-file (path-concat (path-concat (car (path-split (gethash "BASEDIRECTORY" prefs))) "cs") "experiment.orc"))		(setq trnsidx 0)		(trnsiter '(progn			(setq trns (elt colltrns trnsidx))			(setq bufidx (+ traj-id-off trnsidx))			(file-close bufidx)	; close traj data files			; ---------------------------- create CSound unified Orc/Sco file ----------------------------			; instr 1			; 	soundfile input instrument; numtrns instances			;	p4 = soundfile path; p5 = za write index = (+ inputbus-off trnsidx)			; instr 12			;	transform two sounds as they are approaching each other			;	p4 = traj path1; p5 = traj path2; p6 = za read index1 = (+ inputbus-off trnsidx);			;	p7 za read index2 = (+ inputbus-off (1+ trnsidx))			;	p8 = write index1 = (+ mixbus-off trnsidx); p9 = write index2 = (+ mixbus-off (1+ trnsidx))				(setq csd-file (temp-file-make ".csd"))			(file-open 1977 csd-file "w")			(file-write 1977 (concatenate 'STRING				"<CsoundSynthesizer>\\n<CsInstruments>\\n"				"#define TIMESTART #" (gethash "START" timeline) "#\\n"				"#define SENSETOAUDIO #1.0#\\n"		; audio-rate will be set to sense-rate				"#define CENTERX #" center-x "#\\n"				"#define CENTERY #" center-y "#\\n"				"nchnls = 2\\n"				"zakinit " numaudiobusses ", 1\\n"				"#include \"" include-file "\"\\n"				"</CsInstruments>\\n<CsScore>\\n"				"i88 0 " duration "\\n"				; prints progress information				"i12 0 " duration " \"" (gethash "INPUT-FILE" trns) "\" 1 2\\n"				(if (eql MODE "reverb")					(concatenate 'STRING "i33 0 " duration " 1 2 " reverb-time "\\n")					(if (eql MODE "smooth")						(concatenate 'STRING "i34 0 " duration " 1 2 " filter-freq "\\n")					; else MODE == "mirroir"						(concatenate 'STRING "i35 0 " duration " 1 2 " (+ 0.00276 (pow (/ mirroir-amount 200) 0.004)) "\\n")					)				)				"</CsScore>\\n</CsoundSynthesizer>\\n"			))			(file-close 1977)			; ---------------------------- launch csound ----------------------------			(let ((exec-args (list app-path "-d" "-m7" "-A" "-3" "-o" (gethash "OUTPUT-FILE" trns)								  			"-r" sense-rate "-k" sense-rate csd-file)))				(println (concatenate 'STRING "\\n***** Transmitter \"" (gethash "NAME" trns) "\" executing:\\n" (concat-args exec-args)))				(setq return-code (execute parse-cs-output exec-args NIL (car (path-split csd-file))))				(println (concatenate 'STRING "Exited with return code " return-code))				(if (not (eql return-code 0)) (setq trnsidx numtrns) NIL)	; break loop if an error occurs			)		))		(eql return-code 0)		; success if return code is 0	))(defun cleanup NIL	(progn		(setq trnsidx 0)		(trnsiter '(progn			(setq bufidx (+ traj-id-off trnsidx))			(if (oboundp bufidx) (file-close bufidx) NIL)		))		(if (oboundp 1977) (file-close 1977))		T	; success	))(defun create-gui NIL	(if (eql MODE "reverb")		(progn			(gadget-make NIL "LABEL" '(1 1) "Center X" NIL)			(gadget-make center-x "NUMBER" '(2 1) center-x (list NIL 0.0 1.0 0.001))			(gadget-make NIL "LABEL" '(1 2) "Center Y" NIL)			(gadget-make center-y "NUMBER" '(2 2) center-x (list NIL 0.0 1.0 0.001))			(gadget-make NIL "LABEL" '(1 3) "Reverb Time" NIL)			(gadget-make reverb-time "NUMBER" '(2 3) 1.0 (list "sec." 0.0 100.0 0.001))			T	; success		)	; else		(if (eql MODE "smooth")			(progn				(gadget-make NIL "LABEL" '(1 1) "Cutoff Frequency" NIL)				(gadget-make filter-freq "NUMBER" '(2 1) 1.0 (list "Hz" 0.0 1000.0 0.001))				T	; success			)		; else	MODE == "mirroir"			(progn				(gadget-make NIL "LABEL" '(1 1) "Mirroir Amount" NIL)				(gadget-make mirroir-amount "NUMBER" '(2 1) 50.0 (list "%" 0.0 100.0 0.01))				T	; success			)		)	))