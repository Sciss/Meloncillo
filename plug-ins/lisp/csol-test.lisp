; CSOUND AMPLITUDE MATRIX MIXER WITH; TRANSFORMATION UPON TWO TRANSMITTERS APPROACHING;; last modified: 13-jul-08; changelog:;   25-dec-04   uses new 'concatenate' statement;               so it works with jatha 2.3;; tab-size: 4; iterate over all transmitters, where trnsidx; should be initially set to zero and increases up to (numtrns-1)(defun trnsiter (cmd)	(if (< trnsidx numtrns)		(progn			(eval cmd)			(setq trnsidx (1+ trnsidx))			(trnsiter cmd)		)	; else		NIL	)); iterate over all transmitters, where trnsidx; should be initially set to zero and increases up to (numtrns-1); in !steps of two!(defun trnsiter2 (cmd)	(if (< trnsidx numtrns)		(progn			(eval cmd)			(setq trnsidx (+ 2 trnsidx))			(trnsiter2 cmd)		)	; else		NIL	)); iterate over all receivers, where rcvidx; should be initially set to zero and increases up to (numrcv-1)(defun rcviter (cmd)	(if (< rcvidx numrcv)		(progn			(eval cmd)			(setq rcvidx (1+ rcvidx))			(rcviter cmd)		)	; else		NIL	))(defun parse-cs-output (textline)	(if (and (eql 10 (length textline)) (eql "CILLO " (substring textline 0 6)))		(progression-set (car (format-parse "{0,number}" (substring textline 6 10))))	; percent	; else		(println textline)	)); iterate over a list of regex matcher word boundary groups; and extract all inbetween words(defun regexiter (groups input)	(if (> (length groups) 1)		(cons (substring input (cdr (first groups)) (car (second groups)))			(if (> (length groups) 2)				(regexiter (cdr groups) input)			; else				NIL			)		)	; else		NIL	))(defun concat-args (args)	(if (null args) "" (concatenate 'STRING (car args) " " (concat-args (cdr args)))))(defun prepare NIL	(progn		(setq collrcv (gethash "RECEIVERS" cillo))		(setq numrcv (length collrcv))		(setq colltrns (gethash "TRANSMITTERS" cillo))		(setq numtrns (length colltrns))		(if (not (integerp (/ numtrns 2)))			(println (concatenate 'STRING "Number of Transmitters is odd,\\n  reducing to even number : " (setq numtrns (1- numtrns))))		; else			NIL		)		(setq prefs (gethash "PREFERENCES" cillo))		(setq timeline (gethash "TIMELINE" cillo))		(setq duration (- (gethash "STOP" timeline) (gethash "START" timeline)))	; in seconds		(setq sense-rate (gethash "SENSERATE" prefs));		(if (not (eql sense-rate control-rate));			(println (concatenate 'STRING "Sense rate (" sense-rate " Hz) will be resampled to control rate (";							 (source-request "RESAMPLE" control-rate) " Hz)."));		; else;			NIL;		)		(setq volume (pow 10 (/ main-gain 20)))		(setq rcvidx 0)		(rcviter '(progn			(setq rcv (elt collrcv rcvidx))			(setq rcvname (gethash "NAME" rcv))			(setq result (regex-match "[\\d]+" rcvname))		; find integer number part			(if (null result)				NIL			; else				(progn					(setq result (car (last result)))	; last occurance of a string-integer will be converted...					(setq result (format-parse "{0,number,integer}"									(substring rcvname (car result) (cdr result))))	; ...to a lisp integer				)			)			(setf-gethash "AUDIO-OUT-BUS" rcv	; csound output channels start at 1				(if (null result)					(1+ rcvidx)				; else					(car result)				)			)		))		(setq result (path-split input-files))		(setq input-path-parent (car result))		(setq input-path-child (cdr result))		(setq result (regex-match "[\\d]+" input-path-child))		; find integer number part		(setq trnsname-replace			(if (null result)				(cons (length input-path-child) (length input-path-child))			; else				(car (last result))		; last occurance of an string-integer 			)		)				; busses		(setq inputbus-off 1)	; zak variables start at #1 ?		(setq mixbus-off (+ inputbus-off numtrns))		(setq outputbus-off (+ mixbus-off numtrns))		(setq trajxbus-off (+ outputbus-off numrcv))		(setq trajybus-off (+ trajxbus-off numtrns))		(setq numaudiobusses (+ trajybus-off numtrns))		(setq sense-id-off 0)		(setq traj-id-off (+ sense-id-off (* numtrns numrcv)))		; ---------------------------- create CSound unified Orc/Sco file ----------------------------		; instr 1		; 	soundfile input instrument; numtrns instances		;	p4 = soundfile path; p5 = za write index = (+ inputbus-off trnsidx)		; instr 12		; 	read a transmitter path and write its content to zak variables		; 	this is necessary because csound has a bug that forbids you to		; 	use more than one text string in a score i statement.		; 	p4 = traj input path; p5 = za write index for x, p6 = za write index for y		; instr 13		; 	transform two sounds as they are approaching each other		; 	p4 = traj path1 x za read index; p5 = traj path1 y za read index;		; 	p6 = traj path1 x za read index; p7 = traj path1 y za read index;		; 	p8 = trns1 sound za read index; p9 = trns2 sound za read index		; 	p10 = trns1 za write index; p11 = trns2 za write index		; 	p12 = max distance		(setq csd-file (temp-file-make ".csd"));		(setq csd-file "/Users/rutz/Desktop/test.csd")		(file-open 1977 csd-file "w")		(let ((include-file (path-concat (path-concat (car (path-split (gethash "BASEDIRECTORY" prefs))) "cs") "experiment.orc")))			(file-write 1977 (concatenate 'STRING				"<CsoundSynthesizer>\\n<CsInstruments>\\n"				"#define TIMESTART #" (gethash "START" timeline) "#\\n"				"#define SENSETOAUDIO #" (/ sense-rate audio-rate) "#\\n"				"#define CENTERX #0.0#\\n"				"#define CENTERY #0.0#\\n"				"nchnls = " numrcv "\\n"				"zakinit " numaudiobusses ", 1\\n"				"#include \"" include-file "\"\\n"				"</CsInstruments>\\n<CsScore>\\n"				"i88 0 " duration "\\n"				; prints progress information			)) ; right to beginning of <CsCore>		)		; writing input stages		(setq trnsidx 0)		(trnsiter '(progn			(setq trns (elt colltrns trnsidx))			(setq trnsname (gethash "NAME" trns))			(setq result (regex-match "[\\d]+" trnsname))		; find integer number part			(if (null result)				(println (concatenate 'STRING "Transmitter name " trnsname " doesn't contain a number\\n"								 "and cannot be mapped to a sound file path."))			; else				(progn					(setq result (car (last result)))	; last occurance of a string-integer					(setq result						(concatenate 'STRING							(substring input-path-child 0 (car trnsname-replace))							(substring trnsname (car result) (cdr result))							(substring input-path-child (cdr trnsname-replace) (length input-path-child))                        )					)				)			)			(file-write 1977 (concatenate 'STRING "i1 0 " duration " \"" (path-concat input-path-parent result) "\" " (+ inputbus-off trnsidx) "\\n"))		))		; instr 12		; 	read a transmitter path and write its content to zak variables		; 	this is necessary because csound has a bug that forbids you to		; 	use more than one text string in a score i statement.		; 	p4 = traj path; p5 = za write index for x, p6 = za write index for y		; instr 13		; 	transform two sounds as they are approaching each other		; 	p4 = traj path1 x za read index; p5 = traj path1 y za read index;		; 	p6 = traj path1 x za read index; p7 = traj path1 y za read index;		; 	p6 = trns1 sound za read index; p7 = trns2 sound za read index		; 	p8 = trns1 za write index; p9 = trns2 za write index		; writing transform stages		(setq trnsidx 0)		(trnsiter2 '(progn			(setq trnsidx2 (1+ trnsidx))			(let ((temp-file-name1 (temp-file-make))				  (temp-file-name2 (temp-file-make)));			(let ((temp-file-name1 "/tmp/schoko1.tmp");				  (temp-file-name2 "/tmp/schoko2.tmp"))				  				(setq bufidx (+ traj-id-off trnsidx))				(audio-file-open bufidx temp-file-name1 "raw" "float32" sense-rate 2)				(source-request "TRAJ" trnsidx bufidx)				(setq bufidx (+ traj-id-off trnsidx2))				(audio-file-open bufidx temp-file-name2 "raw" "float32" sense-rate 2)				(source-request "TRAJ" trnsidx2 bufidx)				(file-write 1977 (concatenate 'STRING					"i12 0 " duration " \"" temp-file-name1 "\" " (+ trajxbus-off trnsidx) " " (+ trajybus-off trnsidx) "\\n"					"i12 0 " duration " \"" temp-file-name2 "\" " (+ trajxbus-off trnsidx2) " " (+ trajybus-off trnsidx2) "\\n"					"i13 0 " duration " " (+ trajxbus-off trnsidx) " " (+ trajybus-off trnsidx)									  " " (+ trajxbus-off trnsidx2) " " (+ trajybus-off trnsidx2)						 " " (+ inputbus-off trnsidx) " " (+ inputbus-off trnsidx2)						 " " (+ mixbus-off trnsidx) " " (+ mixbus-off trnsidx2) " " max-distance "\\n"				))			)		))		; instr 22		;	mixing stage; (* numtrns numrcv) instances		; 	p4 = za read index = (+ mixbus-off trnsidx); p5 = za write index = (+ outputbus-off rcvidx);		;	p6 = sense path		; writing mixing stages		(setq trnsidx 0)		(trnsiter '(progn			(setq rcvidx 0)			(rcviter '(progn				(let ((temp-file-name (temp-file-make)));				(let ((temp-file-name (concatenate 'STRING "/tmp/schoko" trnsidx "-" rcvidx)))					(setq bufidx (+ sense-id-off (+ (* rcvidx numtrns) trnsidx)))					(audio-file-open bufidx temp-file-name "raw" "float32" sense-rate)					(source-request "SENSE" (cons trnsidx rcvidx) bufidx)					(file-write 1977 (concatenate 'STRING "i22 0 " duration " " (+ mixbus-off trnsidx) " " (+ outputbus-off rcvidx)											 " \"" temp-file-name "\"\\n"))				)			))		))		; instr 77		;	soundfile output instrument; numrcv instances		;	p4 = za read index = (+ outputbus-off rcvidx); p5 = output channel; p6 = main gain		; writing output stages		(setq rcvidx 0)		(rcviter '(progn			(setq rcv (elt collrcv rcvidx))			(file-write 1977 (concatenate 'STRING "i77 0 " duration " " (+ outputbus-off rcvidx) " " (gethash "AUDIO-OUT-BUS" rcv) " " volume "\\n"))		))		(file-write 1977 "</CsScore>\\n</CsoundSynthesizer>\\n")				T	; success	))(defun render NIL	(progn		; ---------------------------- CSOUND APP ----------------------------		(setq trnsidx 0)		(trnsiter '(progn			(setq bufidx (+ traj-id-off trnsidx))			(file-close bufidx)	; close traj data files			(setq rcvidx 0)			(rcviter '(progn				(setq bufidx (+ sense-id-off (+ (* rcvidx numtrns) trnsidx)))				(file-close bufidx)	; close sense data files so they can be read by cs			))		))		(file-close 1977)	; close csd file		(setq app-path (gethash "CSOUNDAPP" prefs))		(let ((exec-args (append (append			  		(list app-path "-o" output-file "-r" audio-rate "-k" control-rate output-format output-res)					(regexiter (regex-match "(\\A|[\\s]+|\\Z)+" app-options) app-options))					(list csd-file))))			(println (concatenate 'STRING "Execute: " (concat-args exec-args)))			(setq return-code (execute parse-cs-output exec-args NIL (car (path-split csd-file))))			(println (concatenate 'STRING "Exited with return code " return-code))		)		(eql return-code 0)		; success if return code is 0	))(defun cleanup NIL	(progn		(setq trnsidx 0)		(trnsiter '(progn			(setq bufidx (+ traj-id-off trnsidx))			(if (oboundp bufidx) (file-close bufidx) NIL)			(setq rcvidx 0)			(rcviter '(progn				(setq bufidx (+ sense-id-off (+ (* rcvidx numtrns) trnsidx)))				(if (oboundp bufidx) (file-close bufidx) NIL)			))		))		(if (oboundp 1977) (file-close 1977))		T	; success	))(defun create-gui NIL	(progn		(gadget-make NIL "LABEL" '(1 1) "Maximum Distance")		(gadget-make max-distance "NUMBER" '(2 1 2 1) 0.7 '(NIL 0.0 1.41 0.001))		(gadget-make NIL "LABEL" '(1 2) "Input Transmitter Sounds")		(gadget-make input-files "PATH" '(2 2 3 1) "")		(gadget-make NIL "LABEL" '(1 3) "Output Receiver Sounds")		(gadget-make output-file "PATH" '(2 3 3 1) "" '(NIL "OUTPUT"))		(gadget-make NIL "LABEL" '(1 4) "Output Format")		(gadget-make output-format "CHOICE" '(2 4) "-A"			'(("-A" . "AIFF") ("-J" . "IRCAM") ("-W" . "WAV") ("-h" . "Raw")))		(gadget-make output-res "CHOICE" '(3 4 2 1) "int24"			'(("-s" . "16-bit int") ("-3" . "24-bit int") ("-l" . "32-bit int") ("-f" . "32-bit float")))		(gadget-make NIL "LABEL" '(3 5) "Audio Rate")		(gadget-make audio-rate "NUMBER" '(4 5) 44100 '("Hz"))		(gadget-make NIL "LABEL" '(3 6) "Control Rate")		(gadget-make control-rate "NUMBER" '(4 6) 4410 '("Hz"))		(gadget-make NIL "LABEL" '(1 5) "Main Gain")		(gadget-make main-gain "NUMBER" '(2 5) 0.0 '("dB"))		(gadget-make NIL "LABEL" '(1 6) "CSound Options")		(gadget-make app-options "TEXT" '(2 6) "-d -R")		T	; success	))