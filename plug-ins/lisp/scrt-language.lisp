; SUPERCOLLIDER REALTIME PLUG-IN THAT FORWARDS THE OSC DATA TO THE SCLANG; CLIENT (port 57120) INSTEAD OF SCSYNTH;; OSC-commands sent;	/cll_in <duration> <sense-rate> <sensebuf-size> <numTrns> : upon entering realtime mode;	/cll_pl <time> : upon play;	/cll_st <time> : upon stop;	/cll_po <time> : upon seek;	/cll_qu : upon quitting realtime mode;	/cll_tr <trnsIdx> <evenOdd> <xyPairs>;; @version 0.10, 31-Mar-08; @author Hanns Holger Rutz(println "SC Language v0.10 (31-Mar-08)"); iterate from startidx incl. to stopidx excl. using variable itervar and executing cmd; if success evaluates to NIL, iteration is aborted(defun cycle (itervar alist success cmd)	(if (and (eval success) (not (null alist)))		(progn			(set itervar (car alist))			(eval cmd)			(cycle itervar (cdr alist) success cmd)		)	)); utility method for osc message block alignment(defun align (val block) (* (floor (/ (+ val (1- block)) block)) block)); wrapper for (source-request) that; automatically handles; trns/rcv index lookup for given objects(defun request-traj (obj)	(let ((trnsidx (- (length colltrns) (length (member obj colltrns)))));		(println (concatenate 'STRING "request-traj " trnsidx))		(source-request "TRAJ" trnsidx 'trajmsg (list			(list "INT" trnsidx traj-msgbuf-off)			(list "VAR" "BUFOFF" (+ traj-msgbuf-off 4))			(list "STREAM" (+ traj-msgbuf-off 12))			(list "SEND" 'scosc)		))	))(defun prepare NIL (progn	(setq success T)	(setq colltrns (gethash "TRANSMITTERS" cillo))	(setq timeline (gethash "TIMELINE" cillo))	(setq duration (- (gethash "STOP" timeline) (gethash "START" timeline)))	; in seconds	(setq sense-rate (gethash "SENSERATE" prefs))	; limited one	(setq sensebuf-size (gethash "SENSEBUFSIZE" prefs))	; limited one	(datagram-channel-open 'scosc sc-socket-ip sc-socket-port)	(datagram-channel-open 'scsync sc-socket-ip sc-socket-port)	(target-request "SYNC" 0 'scsync)	(setq bundle (list		(list "/cll_sy")	))	(osc-bundle-send 'scsync 0.0 bundle)	; create message buffers	(let ((traj-not-aligned (+ 13 sensebuf-size)))		(setq traj-msgbuf-off (align traj-not-aligned 4))		(byte-buffer-alloc 'trajmsg (+ (+ traj-msgbuf-off 12) (* sensebuf-size 4)))		(byte-buffer-write 'trajmsg "/cll_tr\\0x00,iii")		(byte-buffer-write 'trajmsg "f" sensebuf-size)		(byte-buffer-write 'trajmsg '(0) (+ 9 (- traj-msgbuf-off traj-not-aligned)))	; bufNum, bufOff (initially 0)		(byte-buffer-write 'trajmsg sensebuf-size)		; constant # of samples	)	; send initial message	(setq bundle (list		(list "/cll_in" duration sense-rate sensebuf-size (length colltrns))	))	(osc-bundle-send 'scosc 0.0 bundle)	; init objects and create mix synths	(cycle 'trns colltrns 'success		'(if (zerop (logand (gethash "FLAGS" trns) 10))	; is playing?			(request-traj trns)		)	)	T))(defun play (time-off)	(setq bundle (list		(list "/cll_pl" time-off)	))	(osc-bundle-send 'scosc 0.0 bundle)	T)(defun stop (time-off)	(setq bundle (list		(list "/cll_st" time-off)	))	(osc-bundle-send 'scosc 0.0 bundle)	T)(defun position (time-off)	(setq bundle (list		(list "/cll_po" time-off)	))	(osc-bundle-send 'scosc 0.0 bundle)	T)(defun cleanup NIL (progn	(if (oboundp 'scsync) (datagram-channel-close 'scsync))	(if (oboundp 'scosc) (progn		; send quitting message		(setq bundle (list			(list "/cll_qu")		))		(osc-bundle-send 'scosc 0.0 bundle)		(datagram-channel-close 'scosc)	))	(if (oboundp 'trajmsg) (byte-buffer-free 'trajmsg))		T	; success))(defun create-gui NIL (progn	(gadget-make NIL "LABEL" '(1 1 2 1) "--- SCLang Socket ---   ")	(gadget-make NIL "LABEL" '(1 2 1 1) "IP:")	(gadget-make sc-socket-ip "TEXT" '(2 2) "127.0.0.1")	(gadget-make NIL "LABEL" '(1 3 1 1) "Port:")	(gadget-make sc-socket-port "NUMBER" '(2 3) 57120)	T	; success))