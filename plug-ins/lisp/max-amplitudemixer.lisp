; AMPLITUDE-MATRIX-MIXER FOR MAX/MSP;; last modified: 01-jan-05; tab-size: 4;; java object ids used: 1977 = datagram channel;						1978 = bytebuffer for sense data;						1979 = bytebuffer for traj data;						1980 = datagram listening channel(setq realtime T)   ; no offline version yet; find out what the path separator char is;(setq path-sep (let ((test (path-concat "A" "B")));    (substring test (- (length test) 2) (1- (length test))));); iterate over all transmitters, where trnsidx; should be initially set to zero and increases up to (numtrns-1)(defun trnsiter (cmd)	(if (< trnsidx numtrns)		(progn			(eval cmd)			(setq trnsidx (1+ trnsidx))			(trnsiter cmd)		)	)); iterate over all receivers, where rcvidx; should be initially set to zero and increases up to (numrcv-1)(defun rcviter (cmd)	(if (< rcvidx numrcv)		(progn			(eval cmd)			(setq rcvidx (1+ rcvidx))			(rcviter cmd)		)	)); iterate over all outputs, where outidx; should be initially set to zero and increases up to (numoutputs-1)(defun outiter (cmd)	(if (< outidx numoutputs)		(progn			(eval cmd)			(setq outidx (1+ outidx))			(outiter cmd)		)	)); iterate over all inputs, where inidx; should be initially set to zero and increases up to (numinputs-1)(defun initer (cmd)	(if (< inidx numinputs)		(progn			(eval cmd)			(setq inidx (1+ inidx))			(initer cmd)		)	)); iterate over all inputs, where inidx; should be initially set to zero and increases up to (numinputs-1)(defun streamiter (cmd)	(if (< stream-idx (length stream-files))		(progn			(eval cmd)			(setq stream-idx (1+ stream-idx))			(streamiter cmd)		)	)); iterate over a list of regex matcher word boundary groups; and extract all inbetween words(defun regexiter (groups input)	(if (> (length groups) 1)		(cons (substring input (cdr (first groups)) (car (second groups)))			(if (> (length groups) 2)				(regexiter (cdr groups) input)			)		)	))(defun replace-groups (groups input replacement)	(if (> (length groups) 0)        (let ((group (car (last groups))))            (replace-groups (butlast groups)        		(concatenate 'STRING                    (substring input 0 (car group))                    replacement                    (substring input (cdr group) (length input))                )                replacement            )        )    ; else        input	)); replace backslashes by double backslashes because; max/msp will omit them otherwise;; also replace macos x volume names by max/msp sucky proprietary shit,; e.g. "/Volumes/Edgard/test" needs to become "Edgard:/test"(defun replace-seps (input)	(let ((result1 (replace-groups (regex-match "\\\\" input) input "\\\\")))		(if (eql (substring result1 0 (min (length result1) 9)) "/Volumes/")	; = MacOS			(let ((sep-group (regex-match "/" result1)))				(if (> (length sep-group) 2)					(concatenate 'STRING						(substring result1 (cdr (second sep-group)) (car (third sep-group)))						":"						(substring result1 (car (third sep-group)) (length result1))					)				; else					result1				)			)		; else			result1		)	))(defun align (val block) (* (floor (/ (+ val (1- block)) block)) block)); returns T if an error occurs(defun my-bundle-send (timetag bundle)    (null (osc-bundle-send-and-wait 1977 timetag bundle "/synced" 4000));   (null (osc-bundle-send 1977 timetag bundle)))(defun prepare NIL	(progn		(setq collrcv (gethash "RECEIVERS" cillo))		(setq numrcv (length collrcv))		(setq colltrns (gethash "TRANSMITTERS" cillo))		(setq numtrns (length colltrns))		(setq prefs (gethash "PREFERENCES" cillo))		(setq timeline (gethash "TIMELINE" cillo))		(setq sensebuf-size (gethash "SENSEBUFSIZE" prefs))	; limited one		(setq sensebuf-size-h (/ sensebuf-size 2))		(setq sense-rate (gethash "SENSERATE" prefs))	; limited one		(setq audio-rate (gethash "AUDIORATE" prefs))		(setq volume (pow 10 (/ main-gain 20)))		(setq normal (eql mapping-model "normal"))		(setq numinputs (if normal numtrns numrcv))		(setq numoutputs (if normal numrcv numtrns))		(setq collin (if normal colltrns collrcv))		(setq collout (if normal collrcv colltrns))		; buffers		(setq sensebuf-off 0)        (let ((sc-socket (gethash "SUPERCOLLIDEROSC" prefs)))            (datagram-channel-open 1977 (car sc-socket) (cdr sc-socket))            (datagram-channel-open 1980 (car sc-socket) (cdr sc-socket))            (osc-bundle-send 1977 0.0 (list                (list "/dumpOSC" dump-osc)            ))			(osc-bundle-send-and-wait 1980 0.0 (list (list "/notify" 1)) "/done" 4000); 			(osc-bundle-send 1980 0.0 (list (list "/notify" 1)))            (target-request "SYNC" 0 1980)        )		; create objects		(let ((sense-not-aligned (+ 13 sensebuf-size-h))			  (traj-not-aligned (+ 13 sensebuf-size)))			(setq sense-msgbuf-off (align sense-not-aligned 4))			(byte-buffer-alloc 1978 (+ (+ sense-msgbuf-off 12) (* sensebuf-size-h 4)))			(byte-buffer-write 1978 "/b_setn\\0x00,iii")			(byte-buffer-write 1978 "f" sensebuf-size-h)			(byte-buffer-write 1978 '(0) (+ 9 (- sense-msgbuf-off sense-not-aligned)))	; bufNum, bufOff (initially 0)			(byte-buffer-write 1978 sensebuf-size-h)	; constant # of samples		)		(setq outidx 0)		(outiter 			'(let ((obj (elt collout outidx)))				(let ((name (gethash "NAME" obj)))					(let ((result (regex-match "[\\d]+" name)))		; find integer number part						(setf-gethash "AUDIO-OUT-BUS" obj							(if (null result)								outidx							; else								(let ((result2 (car (last result))))									(1- (car (format-parse "{0,number,integer}"												(substring name (car result2) (cdr result2))))))							)						)					)				)			)		)		(let ((result (path-split input-files))) (progn			(setq input-path-parent (car result))			(setq input-path-child (cdr result))			(let ((result2 (regex-match "[\\d]+" input-path-child)))		; find integer number part				(setq inputname-replace					(if (null result2)						(cons (length input-path-child) (length input-path-child))					; else						(car (last result2))		; last occurance of an string-integer 					)				)			)		))        (setq bundle (list            (list "/init" numinputs numoutputs sense-rate sensebuf-size volume)        ))		(setq inidx 0)		(initer            '(progn                (let ((obj (elt collin inidx)))                    (let ((name (gethash "NAME" obj)))                        (let ((result (regex-match "[\\d]+" name)))		; find integer number part                        	(setq bundle (append bundle (list (list "/input" inidx                                (replace-seps (path-concat input-path-parent                                    (if (null result) (progn                                        (println (concatenate 'STRING "Input object name " name " doesn't contain a number\\n"                                             "and cannot be mapped to a sound file path."))                                        input-path-child                                    ) ; else                                        (let ((result2 (car (last result))))                                            (concatenate 'STRING                                                (substring input-path-child 0 (car inputname-replace))                                                (substring name (car result2) (cdr result2))                                                (substring input-path-child (cdr inputname-replace) (length input-path-child))                                            )                                        )                                    )                                ))                            ))))                        )                    )                )                (setq outidx 0)                (outiter                    '(if normal                        (let ((obj (elt collout outidx))                              (matrix-id (+ (* outidx numinputs) inidx))                              (bufidx (+ sensebuf-off (+ (* outidx numinputs) inidx))))                            (source-request "SENSE" (cons (if normal inidx outidx) (if normal outidx inidx)) 1978 (list                                (list "INT" bufidx sense-msgbuf-off)                                (list "VAR" "BUFOFF" (+ sense-msgbuf-off 4))                                (list "STREAM" (+ sense-msgbuf-off 12))                                (list "SEND" 1977)                            ))                         )                    )                )            )		)        (if (my-bundle-send 0.0 (append bundle (list (list "/sync" 1))))            (progn                (println "TIMEOUT! initializing")                NIL		; failure            )        ; else            T	; success        )	))(defun position (time-off) (progn;	(setq frame-off (* audio-rate time-off))	; WARNING : time-off is not accessible within function calls!!	(if (my-bundle-send 0.0 (list            (list "/position" time-off)            (list "/sync" 2)        ))		(progn			(println "TIMEOUT! adjusting position")			NIL		; failure		)	; else		T	; success	)))							(defun play (time-off)	(if (position time-off)        (if (my-bundle-send 0.0 (list                        (list "/play")                        (list "/sync" 3)))            (progn                (println "FAILED! play")                NIL		; failure            )        ; else            T	; success        )    ; else        NIL    ))(defun stop (time-off)    (if (my-bundle-send 0.0 (list                    (list "/stop")                    (list "/sync" 4)))        (progn            (println "FAILED! play")            NIL		; failure        )    ; else        T	; success    ))(defun cleanup NIL	(progn		(if (oboundp 1980) (progn			(osc-bundle-send 1980 0.0 (list (list "/notify" 0)))			(datagram-channel-close 1980)		))		(if (oboundp 1978) (byte-buffer-free 1978) NIL)		(if (oboundp 1979) (byte-buffer-free 1979) NIL)		(if (oboundp 1977) (progn            (osc-bundle-send 1977 0.0 (list                (list "/cleanUp")            ))            (datagram-channel-close 1977)		))				T	; success	))(defun create-gui NIL	(progn		(gadget-make mapping-model "CHOICE" '(1 3 2 1) "normal"			'(("normal" . "Transmitters = Sounds") ("reverse" . "Receivers = Sounds")))		(gadget-make input-files "PATH" '(3 3 3 1) "")		(gadget-make NIL "LABEL" '(1 4 2 1) "Main Gain")		(gadget-make main-gain "NUMBER" '(3 4) 0.0 '("dB"))		; -------------------------------- realtime --------------------------------		(gadget-make NIL "LABEL" '(4 4) "  Dump OSC")		(gadget-make dump-osc "CHECKBOX" '(5 4) 0)		T	; success	))